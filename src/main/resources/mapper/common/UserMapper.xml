<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="com.example.demo.dao.UserDao">

    <resultMap id="RM_User" type="com.example.demo.model.User">
        <result property="id" column="id"/>
        <result property="uname" column="uname"/>
        <result property="password" column="password"/>
        <result property="status" column="status"/>
    </resultMap>

    <!-- 用于select查询公用抽取的列 -->
    <sql id="columns">
        <![CDATA[
        id, uname, password, status
        ]]>
    </sql>

    <!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO user (
            id ,
            uname ,
            password ,
            status 
        ) VALUES (
            #{id},
            #{uname},
            #{password},
            #{status}
        )
    ]]>
    </insert>

    <!-- batch-insert-Object -->
    <insert id="insertBatch" useGeneratedKeys="true" parameterType="java.util.List">
        INSERT INTO user (
                id ,
                uname ,
                password ,
                status 
        ) VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (
                #{item.id},
                #{item.uname},
                #{item.password},
                #{item.status}
               )
        </foreach>
    </insert>

    <sql id="update_sql">
        <set>
                <if test="uname != null and uname != ''">
                 uname = #{uname} ,
            </if>
                <if test="password != null and password != ''">
                 password = #{password} ,
            </if>
            <if test="status != null">
                status = #{status} 
            </if>
            update_time = now(),
        </set>
    </sql>

    <update id="update" >
            UPDATE  user
        <include refid="update_sql" />
            WHERE
                    id = #{id} 
    </update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM user WHERE
        id = #{id} 
    ]]>
    </delete>

    <delete id="delete_batch_list">
        DELETE FROM user WHERE id IN
        <foreach item="item" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="getById" resultMap="RM_User">
        SELECT <include refid="columns" />
        <![CDATA[
            FROM user 
            WHERE 
                id = #{id} 
        ]]>
    </select>

    <sql id="findPage_where">
        <!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
        <where>
            <if test="id != null">
                AND id = #{id}
            </if>
            <if test="uname != null and uname !=''">
                <choose>
                    <when test="selectType['uname']==1">
                        AND uname like CONCAT('%', #{uname}, '%')
                    </when>
                    <otherwise>
                        AND uname = #{uname}
                    </otherwise>
                </choose>
            </if>
            <if test="password != null and password !=''">
                <choose>
                    <when test="selectType['password']==1">
                        AND password like CONCAT('%', #{password}, '%')
                    </when>
                    <otherwise>
                        AND password = #{password}
                    </otherwise>
                </choose>
            </if>
            <if test="statusExclude != null">
                AND status != #{statusExclude}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="ids != null and ids !=''">
                AND id in (${ids})
            </if>
        </where>
    </sql>

    <select id="findPage_count" resultType="long">
        SELECT count(*) FROM user
        <include refid="findPage_where"/>
    </select>

    <select id="selectListByCondition" resultMap="RM_User">
        SELECT <include refid="columns" />
        FROM user
        <include refid="findPage_where"/>

        <if test="sortColumns != null and sortColumns != ''">
            <if test="sortType == 1">
                ORDER BY ${sortColumns} DESC
            </if>
            <if test="sortType == 0">
                ORDER BY ${sortColumns}
            </if>
        </if>
        <if test="offset != null and limit != null">
            LIMIT ${offset}, ${limit}
        </if>
        <if test="offset == null and limit != null">
            LIMIT ${limit}
        </if>
    </select>

    <select id="selectIdsByCondition" resultType="long">
        SELECT id
        FROM user
        <include refid="findPage_where"/>

        <if test="sortColumns != null and sortColumns != ''">
            <if test="sortType == 1">
                ORDER BY ${sortColumns} DESC
            </if>
            <if test="sortType == 0">
                ORDER BY ${sortColumns}
            </if>
        </if>
    </select>

    <select id="selectBatchByIds" resultMap="RM_User">
        SELECT <include refid="columns" />
        FROM user
        WHERE id IN
        <foreach item="item" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

</mapper>

