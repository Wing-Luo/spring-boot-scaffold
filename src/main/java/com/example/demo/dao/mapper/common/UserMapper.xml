<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.dao.model.User">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="uname" jdbcType="VARCHAR" property="uname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user.id, user.uname, user.password, user.status
    /*
    id, uname, password, status
    */
  </sql>
  <select id="selectByExample" parameterType="com.example.demo.dao.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="leftJoin != null">
      left join ${leftJoin.leftTableName} on ${leftJoin.leftTableName}.${leftJoin.leftColumn} = ${leftJoin.rightTableName}.${leftJoin.rightColumn}
    </if>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="groupBy != null">
      group by ${groupBy}
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.example.demo.dao.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.dao.model.User">
    insert into user (id, uname, password, 
      status)
    values (#{id,jdbcType=INTEGER}, #{uname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.dao.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uname != null">
        uname,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uname != null">
        #{uname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.dao.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uname != null">
        uname = #{record.uname,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
      uname = #{record.uname,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
  <resultMap id="BaseResultMap" type="com.example.demo.dao.model.User">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="lastLoginTime" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user.id, user.name, user.password, user.email, user.lastLoginTime, user.createTime
    /*
    id, name, password, email, lastLoginTime, createTime
    */
  </sql>
  <select id="selectByExample" parameterType="com.example.demo.dao.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="leftJoin != null">
      left join ${leftJoin.leftTableName} on ${leftJoin.leftTableName}.${leftJoin.leftColumn} = ${leftJoin.rightTableName}.${leftJoin.rightColumn}
    </if>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="groupBy != null">
      group by ${groupBy}
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.example.demo.dao.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.dao.model.User">
    insert into user (id, name, password, 
      email, lastLoginTime, createTime
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{lastLoginTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.dao.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="lastLoginTime != null">
        lastLoginTime,
      </if>
      <if test="createTime != null">
        createTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.dao.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.lastLoginTime != null">
        lastLoginTime = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        createTime = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      lastLoginTime = #{record.lastLoginTime,jdbcType=TIMESTAMP},
      createTime = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
  <resultMap id="BaseResultMap" type="com.example.demo.dao.model.User">
    <result column="Host" jdbcType="CHAR" property="host" />
    <result column="User" jdbcType="CHAR" property="user" />
    <result column="Password" jdbcType="CHAR" property="password" />
    <result column="Select_priv" jdbcType="CHAR" property="select_priv" />
    <result column="Insert_priv" jdbcType="CHAR" property="insert_priv" />
    <result column="Update_priv" jdbcType="CHAR" property="update_priv" />
    <result column="Delete_priv" jdbcType="CHAR" property="delete_priv" />
    <result column="Create_priv" jdbcType="CHAR" property="create_priv" />
    <result column="Drop_priv" jdbcType="CHAR" property="drop_priv" />
    <result column="Reload_priv" jdbcType="CHAR" property="reload_priv" />
    <result column="Shutdown_priv" jdbcType="CHAR" property="shutdown_priv" />
    <result column="Process_priv" jdbcType="CHAR" property="process_priv" />
    <result column="File_priv" jdbcType="CHAR" property="file_priv" />
    <result column="Grant_priv" jdbcType="CHAR" property="grant_priv" />
    <result column="References_priv" jdbcType="CHAR" property="references_priv" />
    <result column="Index_priv" jdbcType="CHAR" property="index_priv" />
    <result column="Alter_priv" jdbcType="CHAR" property="alter_priv" />
    <result column="Show_db_priv" jdbcType="CHAR" property="show_db_priv" />
    <result column="Super_priv" jdbcType="CHAR" property="super_priv" />
    <result column="Create_tmp_table_priv" jdbcType="CHAR" property="create_tmp_table_priv" />
    <result column="Lock_tables_priv" jdbcType="CHAR" property="lock_tables_priv" />
    <result column="Execute_priv" jdbcType="CHAR" property="execute_priv" />
    <result column="Repl_slave_priv" jdbcType="CHAR" property="repl_slave_priv" />
    <result column="Repl_client_priv" jdbcType="CHAR" property="repl_client_priv" />
    <result column="Create_view_priv" jdbcType="CHAR" property="create_view_priv" />
    <result column="Show_view_priv" jdbcType="CHAR" property="show_view_priv" />
    <result column="Create_routine_priv" jdbcType="CHAR" property="create_routine_priv" />
    <result column="Alter_routine_priv" jdbcType="CHAR" property="alter_routine_priv" />
    <result column="Create_user_priv" jdbcType="CHAR" property="create_user_priv" />
    <result column="Event_priv" jdbcType="CHAR" property="event_priv" />
    <result column="Trigger_priv" jdbcType="CHAR" property="trigger_priv" />
    <result column="Create_tablespace_priv" jdbcType="CHAR" property="create_tablespace_priv" />
    <result column="ssl_type" jdbcType="CHAR" property="ssl_type" />
    <result column="max_questions" jdbcType="INTEGER" property="max_questions" />
    <result column="max_updates" jdbcType="INTEGER" property="max_updates" />
    <result column="max_connections" jdbcType="INTEGER" property="max_connections" />
    <result column="max_user_connections" jdbcType="INTEGER" property="max_user_connections" />
    <result column="plugin" jdbcType="CHAR" property="plugin" />
    <result column="password_expired" jdbcType="CHAR" property="password_expired" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.demo.dao.model.User">
    <result column="ssl_cipher" jdbcType="LONGVARBINARY" property="ssl_cipher" />
    <result column="x509_issuer" jdbcType="LONGVARBINARY" property="x509_issuer" />
    <result column="x509_subject" jdbcType="LONGVARBINARY" property="x509_subject" />
    <result column="authentication_string" jdbcType="LONGVARCHAR" property="authentication_string" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user.Host, user.User, user.Password, user.Select_priv, user.Insert_priv, user.Update_priv, user.Delete_priv, user.Create_priv, user.Drop_priv, user.Reload_priv, user.Shutdown_priv, user.Process_priv, user.File_priv, user.Grant_priv, user.References_priv, user.Index_priv, user.Alter_priv, user.Show_db_priv, user.Super_priv, user.Create_tmp_table_priv, user.Lock_tables_priv, user.Execute_priv, user.Repl_slave_priv, user.Repl_client_priv, user.Create_view_priv, user.Show_view_priv, user.Create_routine_priv, user.Alter_routine_priv, user.Create_user_priv, user.Event_priv, user.Trigger_priv, user.Create_tablespace_priv, user.ssl_type, user.max_questions, user.max_updates, user.max_connections, user.max_user_connections, user.plugin, user.password_expired
    /*
    Host, User, Password, Select_priv, Insert_priv, Update_priv, Delete_priv, Create_priv, 
    Drop_priv, Reload_priv, Shutdown_priv, Process_priv, File_priv, Grant_priv, References_priv, 
    Index_priv, Alter_priv, Show_db_priv, Super_priv, Create_tmp_table_priv, Lock_tables_priv, 
    Execute_priv, Repl_slave_priv, Repl_client_priv, Create_view_priv, Show_view_priv, 
    Create_routine_priv, Alter_routine_priv, Create_user_priv, Event_priv, Trigger_priv, 
    Create_tablespace_priv, ssl_type, max_questions, max_updates, max_connections, max_user_connections, 
    plugin, password_expired
    */
  </sql>
  <sql id="Blob_Column_List">
    ssl_cipher, x509_issuer, x509_subject, authentication_string
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.demo.dao.model.UserExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.demo.dao.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="leftJoin != null">
      left join ${leftJoin.leftTableName} on ${leftJoin.leftTableName}.${leftJoin.leftColumn} = ${leftJoin.rightTableName}.${leftJoin.rightColumn}
    </if>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="groupBy != null">
      group by ${groupBy}
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.example.demo.dao.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.dao.model.User">
    insert into user (Host, User, Password, 
      Select_priv, Insert_priv, Update_priv, 
      Delete_priv, Create_priv, Drop_priv, 
      Reload_priv, Shutdown_priv, Process_priv, 
      File_priv, Grant_priv, References_priv, 
      Index_priv, Alter_priv, Show_db_priv, 
      Super_priv, Create_tmp_table_priv, Lock_tables_priv, 
      Execute_priv, Repl_slave_priv, Repl_client_priv, 
      Create_view_priv, Show_view_priv, Create_routine_priv, 
      Alter_routine_priv, Create_user_priv, Event_priv, 
      Trigger_priv, Create_tablespace_priv, ssl_type, 
      max_questions, max_updates, max_connections, 
      max_user_connections, plugin, password_expired, 
      ssl_cipher, x509_issuer, x509_subject, 
      authentication_string)
    values (#{host,jdbcType=CHAR}, #{user,jdbcType=CHAR}, #{password,jdbcType=CHAR}, 
      #{select_priv,jdbcType=CHAR}, #{insert_priv,jdbcType=CHAR}, #{update_priv,jdbcType=CHAR}, 
      #{delete_priv,jdbcType=CHAR}, #{create_priv,jdbcType=CHAR}, #{drop_priv,jdbcType=CHAR}, 
      #{reload_priv,jdbcType=CHAR}, #{shutdown_priv,jdbcType=CHAR}, #{process_priv,jdbcType=CHAR}, 
      #{file_priv,jdbcType=CHAR}, #{grant_priv,jdbcType=CHAR}, #{references_priv,jdbcType=CHAR}, 
      #{index_priv,jdbcType=CHAR}, #{alter_priv,jdbcType=CHAR}, #{show_db_priv,jdbcType=CHAR}, 
      #{super_priv,jdbcType=CHAR}, #{create_tmp_table_priv,jdbcType=CHAR}, #{lock_tables_priv,jdbcType=CHAR}, 
      #{execute_priv,jdbcType=CHAR}, #{repl_slave_priv,jdbcType=CHAR}, #{repl_client_priv,jdbcType=CHAR}, 
      #{create_view_priv,jdbcType=CHAR}, #{show_view_priv,jdbcType=CHAR}, #{create_routine_priv,jdbcType=CHAR}, 
      #{alter_routine_priv,jdbcType=CHAR}, #{create_user_priv,jdbcType=CHAR}, #{event_priv,jdbcType=CHAR}, 
      #{trigger_priv,jdbcType=CHAR}, #{create_tablespace_priv,jdbcType=CHAR}, #{ssl_type,jdbcType=CHAR}, 
      #{max_questions,jdbcType=INTEGER}, #{max_updates,jdbcType=INTEGER}, #{max_connections,jdbcType=INTEGER}, 
      #{max_user_connections,jdbcType=INTEGER}, #{plugin,jdbcType=CHAR}, #{password_expired,jdbcType=CHAR}, 
      #{ssl_cipher,jdbcType=LONGVARBINARY}, #{x509_issuer,jdbcType=LONGVARBINARY}, #{x509_subject,jdbcType=LONGVARBINARY}, 
      #{authentication_string,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.dao.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="host != null">
        Host,
      </if>
      <if test="user != null">
        User,
      </if>
      <if test="password != null">
        Password,
      </if>
      <if test="select_priv != null">
        Select_priv,
      </if>
      <if test="insert_priv != null">
        Insert_priv,
      </if>
      <if test="update_priv != null">
        Update_priv,
      </if>
      <if test="delete_priv != null">
        Delete_priv,
      </if>
      <if test="create_priv != null">
        Create_priv,
      </if>
      <if test="drop_priv != null">
        Drop_priv,
      </if>
      <if test="reload_priv != null">
        Reload_priv,
      </if>
      <if test="shutdown_priv != null">
        Shutdown_priv,
      </if>
      <if test="process_priv != null">
        Process_priv,
      </if>
      <if test="file_priv != null">
        File_priv,
      </if>
      <if test="grant_priv != null">
        Grant_priv,
      </if>
      <if test="references_priv != null">
        References_priv,
      </if>
      <if test="index_priv != null">
        Index_priv,
      </if>
      <if test="alter_priv != null">
        Alter_priv,
      </if>
      <if test="show_db_priv != null">
        Show_db_priv,
      </if>
      <if test="super_priv != null">
        Super_priv,
      </if>
      <if test="create_tmp_table_priv != null">
        Create_tmp_table_priv,
      </if>
      <if test="lock_tables_priv != null">
        Lock_tables_priv,
      </if>
      <if test="execute_priv != null">
        Execute_priv,
      </if>
      <if test="repl_slave_priv != null">
        Repl_slave_priv,
      </if>
      <if test="repl_client_priv != null">
        Repl_client_priv,
      </if>
      <if test="create_view_priv != null">
        Create_view_priv,
      </if>
      <if test="show_view_priv != null">
        Show_view_priv,
      </if>
      <if test="create_routine_priv != null">
        Create_routine_priv,
      </if>
      <if test="alter_routine_priv != null">
        Alter_routine_priv,
      </if>
      <if test="create_user_priv != null">
        Create_user_priv,
      </if>
      <if test="event_priv != null">
        Event_priv,
      </if>
      <if test="trigger_priv != null">
        Trigger_priv,
      </if>
      <if test="create_tablespace_priv != null">
        Create_tablespace_priv,
      </if>
      <if test="ssl_type != null">
        ssl_type,
      </if>
      <if test="max_questions != null">
        max_questions,
      </if>
      <if test="max_updates != null">
        max_updates,
      </if>
      <if test="max_connections != null">
        max_connections,
      </if>
      <if test="max_user_connections != null">
        max_user_connections,
      </if>
      <if test="plugin != null">
        plugin,
      </if>
      <if test="password_expired != null">
        password_expired,
      </if>
      <if test="ssl_cipher != null">
        ssl_cipher,
      </if>
      <if test="x509_issuer != null">
        x509_issuer,
      </if>
      <if test="x509_subject != null">
        x509_subject,
      </if>
      <if test="authentication_string != null">
        authentication_string,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="host != null">
        #{host,jdbcType=CHAR},
      </if>
      <if test="user != null">
        #{user,jdbcType=CHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=CHAR},
      </if>
      <if test="select_priv != null">
        #{select_priv,jdbcType=CHAR},
      </if>
      <if test="insert_priv != null">
        #{insert_priv,jdbcType=CHAR},
      </if>
      <if test="update_priv != null">
        #{update_priv,jdbcType=CHAR},
      </if>
      <if test="delete_priv != null">
        #{delete_priv,jdbcType=CHAR},
      </if>
      <if test="create_priv != null">
        #{create_priv,jdbcType=CHAR},
      </if>
      <if test="drop_priv != null">
        #{drop_priv,jdbcType=CHAR},
      </if>
      <if test="reload_priv != null">
        #{reload_priv,jdbcType=CHAR},
      </if>
      <if test="shutdown_priv != null">
        #{shutdown_priv,jdbcType=CHAR},
      </if>
      <if test="process_priv != null">
        #{process_priv,jdbcType=CHAR},
      </if>
      <if test="file_priv != null">
        #{file_priv,jdbcType=CHAR},
      </if>
      <if test="grant_priv != null">
        #{grant_priv,jdbcType=CHAR},
      </if>
      <if test="references_priv != null">
        #{references_priv,jdbcType=CHAR},
      </if>
      <if test="index_priv != null">
        #{index_priv,jdbcType=CHAR},
      </if>
      <if test="alter_priv != null">
        #{alter_priv,jdbcType=CHAR},
      </if>
      <if test="show_db_priv != null">
        #{show_db_priv,jdbcType=CHAR},
      </if>
      <if test="super_priv != null">
        #{super_priv,jdbcType=CHAR},
      </if>
      <if test="create_tmp_table_priv != null">
        #{create_tmp_table_priv,jdbcType=CHAR},
      </if>
      <if test="lock_tables_priv != null">
        #{lock_tables_priv,jdbcType=CHAR},
      </if>
      <if test="execute_priv != null">
        #{execute_priv,jdbcType=CHAR},
      </if>
      <if test="repl_slave_priv != null">
        #{repl_slave_priv,jdbcType=CHAR},
      </if>
      <if test="repl_client_priv != null">
        #{repl_client_priv,jdbcType=CHAR},
      </if>
      <if test="create_view_priv != null">
        #{create_view_priv,jdbcType=CHAR},
      </if>
      <if test="show_view_priv != null">
        #{show_view_priv,jdbcType=CHAR},
      </if>
      <if test="create_routine_priv != null">
        #{create_routine_priv,jdbcType=CHAR},
      </if>
      <if test="alter_routine_priv != null">
        #{alter_routine_priv,jdbcType=CHAR},
      </if>
      <if test="create_user_priv != null">
        #{create_user_priv,jdbcType=CHAR},
      </if>
      <if test="event_priv != null">
        #{event_priv,jdbcType=CHAR},
      </if>
      <if test="trigger_priv != null">
        #{trigger_priv,jdbcType=CHAR},
      </if>
      <if test="create_tablespace_priv != null">
        #{create_tablespace_priv,jdbcType=CHAR},
      </if>
      <if test="ssl_type != null">
        #{ssl_type,jdbcType=CHAR},
      </if>
      <if test="max_questions != null">
        #{max_questions,jdbcType=INTEGER},
      </if>
      <if test="max_updates != null">
        #{max_updates,jdbcType=INTEGER},
      </if>
      <if test="max_connections != null">
        #{max_connections,jdbcType=INTEGER},
      </if>
      <if test="max_user_connections != null">
        #{max_user_connections,jdbcType=INTEGER},
      </if>
      <if test="plugin != null">
        #{plugin,jdbcType=CHAR},
      </if>
      <if test="password_expired != null">
        #{password_expired,jdbcType=CHAR},
      </if>
      <if test="ssl_cipher != null">
        #{ssl_cipher,jdbcType=LONGVARBINARY},
      </if>
      <if test="x509_issuer != null">
        #{x509_issuer,jdbcType=LONGVARBINARY},
      </if>
      <if test="x509_subject != null">
        #{x509_subject,jdbcType=LONGVARBINARY},
      </if>
      <if test="authentication_string != null">
        #{authentication_string,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.dao.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.host != null">
        Host = #{record.host,jdbcType=CHAR},
      </if>
      <if test="record.user != null">
        User = #{record.user,jdbcType=CHAR},
      </if>
      <if test="record.password != null">
        Password = #{record.password,jdbcType=CHAR},
      </if>
      <if test="record.select_priv != null">
        Select_priv = #{record.select_priv,jdbcType=CHAR},
      </if>
      <if test="record.insert_priv != null">
        Insert_priv = #{record.insert_priv,jdbcType=CHAR},
      </if>
      <if test="record.update_priv != null">
        Update_priv = #{record.update_priv,jdbcType=CHAR},
      </if>
      <if test="record.delete_priv != null">
        Delete_priv = #{record.delete_priv,jdbcType=CHAR},
      </if>
      <if test="record.create_priv != null">
        Create_priv = #{record.create_priv,jdbcType=CHAR},
      </if>
      <if test="record.drop_priv != null">
        Drop_priv = #{record.drop_priv,jdbcType=CHAR},
      </if>
      <if test="record.reload_priv != null">
        Reload_priv = #{record.reload_priv,jdbcType=CHAR},
      </if>
      <if test="record.shutdown_priv != null">
        Shutdown_priv = #{record.shutdown_priv,jdbcType=CHAR},
      </if>
      <if test="record.process_priv != null">
        Process_priv = #{record.process_priv,jdbcType=CHAR},
      </if>
      <if test="record.file_priv != null">
        File_priv = #{record.file_priv,jdbcType=CHAR},
      </if>
      <if test="record.grant_priv != null">
        Grant_priv = #{record.grant_priv,jdbcType=CHAR},
      </if>
      <if test="record.references_priv != null">
        References_priv = #{record.references_priv,jdbcType=CHAR},
      </if>
      <if test="record.index_priv != null">
        Index_priv = #{record.index_priv,jdbcType=CHAR},
      </if>
      <if test="record.alter_priv != null">
        Alter_priv = #{record.alter_priv,jdbcType=CHAR},
      </if>
      <if test="record.show_db_priv != null">
        Show_db_priv = #{record.show_db_priv,jdbcType=CHAR},
      </if>
      <if test="record.super_priv != null">
        Super_priv = #{record.super_priv,jdbcType=CHAR},
      </if>
      <if test="record.create_tmp_table_priv != null">
        Create_tmp_table_priv = #{record.create_tmp_table_priv,jdbcType=CHAR},
      </if>
      <if test="record.lock_tables_priv != null">
        Lock_tables_priv = #{record.lock_tables_priv,jdbcType=CHAR},
      </if>
      <if test="record.execute_priv != null">
        Execute_priv = #{record.execute_priv,jdbcType=CHAR},
      </if>
      <if test="record.repl_slave_priv != null">
        Repl_slave_priv = #{record.repl_slave_priv,jdbcType=CHAR},
      </if>
      <if test="record.repl_client_priv != null">
        Repl_client_priv = #{record.repl_client_priv,jdbcType=CHAR},
      </if>
      <if test="record.create_view_priv != null">
        Create_view_priv = #{record.create_view_priv,jdbcType=CHAR},
      </if>
      <if test="record.show_view_priv != null">
        Show_view_priv = #{record.show_view_priv,jdbcType=CHAR},
      </if>
      <if test="record.create_routine_priv != null">
        Create_routine_priv = #{record.create_routine_priv,jdbcType=CHAR},
      </if>
      <if test="record.alter_routine_priv != null">
        Alter_routine_priv = #{record.alter_routine_priv,jdbcType=CHAR},
      </if>
      <if test="record.create_user_priv != null">
        Create_user_priv = #{record.create_user_priv,jdbcType=CHAR},
      </if>
      <if test="record.event_priv != null">
        Event_priv = #{record.event_priv,jdbcType=CHAR},
      </if>
      <if test="record.trigger_priv != null">
        Trigger_priv = #{record.trigger_priv,jdbcType=CHAR},
      </if>
      <if test="record.create_tablespace_priv != null">
        Create_tablespace_priv = #{record.create_tablespace_priv,jdbcType=CHAR},
      </if>
      <if test="record.ssl_type != null">
        ssl_type = #{record.ssl_type,jdbcType=CHAR},
      </if>
      <if test="record.max_questions != null">
        max_questions = #{record.max_questions,jdbcType=INTEGER},
      </if>
      <if test="record.max_updates != null">
        max_updates = #{record.max_updates,jdbcType=INTEGER},
      </if>
      <if test="record.max_connections != null">
        max_connections = #{record.max_connections,jdbcType=INTEGER},
      </if>
      <if test="record.max_user_connections != null">
        max_user_connections = #{record.max_user_connections,jdbcType=INTEGER},
      </if>
      <if test="record.plugin != null">
        plugin = #{record.plugin,jdbcType=CHAR},
      </if>
      <if test="record.password_expired != null">
        password_expired = #{record.password_expired,jdbcType=CHAR},
      </if>
      <if test="record.ssl_cipher != null">
        ssl_cipher = #{record.ssl_cipher,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.x509_issuer != null">
        x509_issuer = #{record.x509_issuer,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.x509_subject != null">
        x509_subject = #{record.x509_subject,jdbcType=LONGVARBINARY},
      </if>
      <if test="record.authentication_string != null">
        authentication_string = #{record.authentication_string,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user
    set Host = #{record.host,jdbcType=CHAR},
      User = #{record.user,jdbcType=CHAR},
      Password = #{record.password,jdbcType=CHAR},
      Select_priv = #{record.select_priv,jdbcType=CHAR},
      Insert_priv = #{record.insert_priv,jdbcType=CHAR},
      Update_priv = #{record.update_priv,jdbcType=CHAR},
      Delete_priv = #{record.delete_priv,jdbcType=CHAR},
      Create_priv = #{record.create_priv,jdbcType=CHAR},
      Drop_priv = #{record.drop_priv,jdbcType=CHAR},
      Reload_priv = #{record.reload_priv,jdbcType=CHAR},
      Shutdown_priv = #{record.shutdown_priv,jdbcType=CHAR},
      Process_priv = #{record.process_priv,jdbcType=CHAR},
      File_priv = #{record.file_priv,jdbcType=CHAR},
      Grant_priv = #{record.grant_priv,jdbcType=CHAR},
      References_priv = #{record.references_priv,jdbcType=CHAR},
      Index_priv = #{record.index_priv,jdbcType=CHAR},
      Alter_priv = #{record.alter_priv,jdbcType=CHAR},
      Show_db_priv = #{record.show_db_priv,jdbcType=CHAR},
      Super_priv = #{record.super_priv,jdbcType=CHAR},
      Create_tmp_table_priv = #{record.create_tmp_table_priv,jdbcType=CHAR},
      Lock_tables_priv = #{record.lock_tables_priv,jdbcType=CHAR},
      Execute_priv = #{record.execute_priv,jdbcType=CHAR},
      Repl_slave_priv = #{record.repl_slave_priv,jdbcType=CHAR},
      Repl_client_priv = #{record.repl_client_priv,jdbcType=CHAR},
      Create_view_priv = #{record.create_view_priv,jdbcType=CHAR},
      Show_view_priv = #{record.show_view_priv,jdbcType=CHAR},
      Create_routine_priv = #{record.create_routine_priv,jdbcType=CHAR},
      Alter_routine_priv = #{record.alter_routine_priv,jdbcType=CHAR},
      Create_user_priv = #{record.create_user_priv,jdbcType=CHAR},
      Event_priv = #{record.event_priv,jdbcType=CHAR},
      Trigger_priv = #{record.trigger_priv,jdbcType=CHAR},
      Create_tablespace_priv = #{record.create_tablespace_priv,jdbcType=CHAR},
      ssl_type = #{record.ssl_type,jdbcType=CHAR},
      max_questions = #{record.max_questions,jdbcType=INTEGER},
      max_updates = #{record.max_updates,jdbcType=INTEGER},
      max_connections = #{record.max_connections,jdbcType=INTEGER},
      max_user_connections = #{record.max_user_connections,jdbcType=INTEGER},
      plugin = #{record.plugin,jdbcType=CHAR},
      password_expired = #{record.password_expired,jdbcType=CHAR},
      ssl_cipher = #{record.ssl_cipher,jdbcType=LONGVARBINARY},
      x509_issuer = #{record.x509_issuer,jdbcType=LONGVARBINARY},
      x509_subject = #{record.x509_subject,jdbcType=LONGVARBINARY},
      authentication_string = #{record.authentication_string,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set Host = #{record.host,jdbcType=CHAR},
      User = #{record.user,jdbcType=CHAR},
      Password = #{record.password,jdbcType=CHAR},
      Select_priv = #{record.select_priv,jdbcType=CHAR},
      Insert_priv = #{record.insert_priv,jdbcType=CHAR},
      Update_priv = #{record.update_priv,jdbcType=CHAR},
      Delete_priv = #{record.delete_priv,jdbcType=CHAR},
      Create_priv = #{record.create_priv,jdbcType=CHAR},
      Drop_priv = #{record.drop_priv,jdbcType=CHAR},
      Reload_priv = #{record.reload_priv,jdbcType=CHAR},
      Shutdown_priv = #{record.shutdown_priv,jdbcType=CHAR},
      Process_priv = #{record.process_priv,jdbcType=CHAR},
      File_priv = #{record.file_priv,jdbcType=CHAR},
      Grant_priv = #{record.grant_priv,jdbcType=CHAR},
      References_priv = #{record.references_priv,jdbcType=CHAR},
      Index_priv = #{record.index_priv,jdbcType=CHAR},
      Alter_priv = #{record.alter_priv,jdbcType=CHAR},
      Show_db_priv = #{record.show_db_priv,jdbcType=CHAR},
      Super_priv = #{record.super_priv,jdbcType=CHAR},
      Create_tmp_table_priv = #{record.create_tmp_table_priv,jdbcType=CHAR},
      Lock_tables_priv = #{record.lock_tables_priv,jdbcType=CHAR},
      Execute_priv = #{record.execute_priv,jdbcType=CHAR},
      Repl_slave_priv = #{record.repl_slave_priv,jdbcType=CHAR},
      Repl_client_priv = #{record.repl_client_priv,jdbcType=CHAR},
      Create_view_priv = #{record.create_view_priv,jdbcType=CHAR},
      Show_view_priv = #{record.show_view_priv,jdbcType=CHAR},
      Create_routine_priv = #{record.create_routine_priv,jdbcType=CHAR},
      Alter_routine_priv = #{record.alter_routine_priv,jdbcType=CHAR},
      Create_user_priv = #{record.create_user_priv,jdbcType=CHAR},
      Event_priv = #{record.event_priv,jdbcType=CHAR},
      Trigger_priv = #{record.trigger_priv,jdbcType=CHAR},
      Create_tablespace_priv = #{record.create_tablespace_priv,jdbcType=CHAR},
      ssl_type = #{record.ssl_type,jdbcType=CHAR},
      max_questions = #{record.max_questions,jdbcType=INTEGER},
      max_updates = #{record.max_updates,jdbcType=INTEGER},
      max_connections = #{record.max_connections,jdbcType=INTEGER},
      max_user_connections = #{record.max_user_connections,jdbcType=INTEGER},
      plugin = #{record.plugin,jdbcType=CHAR},
      password_expired = #{record.password_expired,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
  <resultMap id="BaseResultMap" type="com.example.demo.dao.model.User">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="cnname" jdbcType="VARCHAR" property="cnname" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="telephone" jdbcType="VARCHAR" property="telephone" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      <if test="leftJoin != null and leftJoin.targetColumn != null">
        and ${leftJoin.leftTableName}.${leftJoin.targetColumn} = #{leftJoin.targetValue}
      </if>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user.id, user.cnname, user.username, user.password, user.email, user.telephone
    /*
    id, cnname, username, password, email, telephone
    */
  </sql>
  <select id="selectByExample" parameterType="com.example.demo.dao.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="leftJoin != null">
      left join ${leftJoin.leftTableName} on ${leftJoin.leftTableName}.${leftJoin.leftColumn} = ${leftJoin.rightTableName}.${leftJoin.rightColumn}
    </if>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="groupBy != null">
      group by ${groupBy}
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.example.demo.dao.model.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.dao.model.User">
    insert into user (id, cnname, username, 
      password, email, telephone
      )
    values (#{id,jdbcType=INTEGER}, #{cnname,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.dao.model.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="cnname != null">
        cnname,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="telephone != null">
        telephone,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="cnname != null">
        #{cnname,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null">
        #{telephone,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.dao.model.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.cnname != null">
        cnname = #{record.cnname,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.telephone != null">
        telephone = #{record.telephone,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
      cnname = #{record.cnname,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      telephone = #{record.telephone,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
</mapper>